package com.betfair.aping;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Logger;

import com.betfair.aping.api.ApiNgJsonRpcOperations;
import com.betfair.aping.api.ApiNgOperations;
import com.betfair.aping.entities.ExBestOfferOverRides;
import com.betfair.aping.entities.MarketBook;
import com.betfair.aping.entities.MarketCatalogue;
import com.betfair.aping.entities.MarketFilter;
import com.betfair.aping.entities.PriceProjection;
import com.betfair.aping.entities.PriceSize;
import com.betfair.aping.entities.Runner;
import com.betfair.aping.enums.MarketBettingType;
import com.betfair.aping.enums.MarketProjection;
import com.betfair.aping.enums.MarketSort;
import com.betfair.aping.enums.PriceData;
import com.betfair.aping.exceptions.APINGException;
import com.betfair.aping.util.Jdbc;

/**
 * This is a demonstration class to show a quick demo of the new Betfair API-NG.
 * When you execute the class will: <li>find a market (next horse race in the
 * UK)</li> <li>get prices and runners on this market</li> <li>place a bet on 1
 * runner</li> <li>handle the error</li>
 * 
 */
public class ApiNGDemo {
	// market book. get prices
	private static Properties prop = new Properties();
	private static String applicationKey;
	private static String sessionToken;
	private static String jsonOrRescript;
	private static boolean debug;
	private final static Logger LOGGER = Logger.getLogger(ApiNGDemo.class
			.getName());
	static {
		try {
			InputStream in = ApiNGDemo.class
					.getResourceAsStream("/apingdemo.properties");
			prop.load(in);
			in.close();

			debug = new Boolean(prop.getProperty("DEBUG"));

		} catch (IOException e) {
			System.out.println("Error loading the properties file: "
					+ e.toString());
		}
	}
	public static ApiNgJsonRpcOperations jsonOperations;

	public static void main(String[] args) {

		jsonOperations = ApiNgJsonRpcOperations.getInstance();
		// getting the AppKey and the session token

		applicationKey = "5DWDmqno4izTvPPf";
		sessionToken = "sKQhUX2VofHHTnq3yWQUiTHoO+lPu/yUAZzRfkjEr48=";
		jsonOrRescript = "json-rpc";

		if (jsonOrRescript.equalsIgnoreCase("json-rpc")) {
		} else if (jsonOrRescript.equalsIgnoreCase("rescript")) {
		}

		fetchMarketBook();
		/*
		 * if(jsonRpcRequest) { ApiNGJsonRpcDemo jsonRpcDemo = new
		 * ApiNGJsonRpcDemo(); jsonRpcDemo.start(applicationKey, sessionToken);
		 * } else { ApiNGJRescriptDemo rescriptDemo = new ApiNGJRescriptDemo();
		 * rescriptDemo.start(applicationKey, sessionToken); }
		 */
	}

	/**
	 * 
	 */
	public static void fetchMarketBook() {
		try {
			MarketFilter filter = new MarketFilter();
			Set<String> eventTypeIds = new HashSet<String>();
			eventTypeIds.add("1");
			filter.setEventTypeIds(eventTypeIds);

			Set<MarketProjection> marketProjection = new HashSet<MarketProjection>();

			Jdbc.start();

			// marketIds.add("1.113291175");
			PriceProjection priceProjection = new PriceProjection();
			HashSet<PriceData> hashSet = new HashSet<PriceData>();
			hashSet.add(PriceData.EX_BEST_OFFERS);
			priceProjection.setPriceData(hashSet);

			List<Hashtable<String, String>> list = Jdbc
					.select("select * from `match` where  awayTeam <> 'xxx' limit 1 ");

			List<String> marketIds = new ArrayList<String>();
			 marketIds.add("1.113308255");

			//for (Hashtable<String, String> h : list) {
			//	marketIds.add(h.get("marketId"));
			//	System.out.println(h.get("homeTeam"));
		//	}

			List<MarketBook> result = jsonOperations.listMarketBook(marketIds,
					priceProjection, null, null, null, applicationKey,
					sessionToken);
			System.out.println(result);

			for (MarketBook book : result) {
				for (Runner r: book.getRunners()){
					
					PriceSize ps= r.getEx().getAvailableToBack().get(0);
					System.out.print(ps.getPrice().toString()+" ");
					
					
				}
			}
			// jsonOperations.listEventTypes(filter, applicationKey,
			// sessionToken);
			// jsonOperations.listEvents(filter, applicationKey, sessionToken);
		} catch (APINGException e) {
			System.out.println("error blabla :");
			e.printStackTrace();
		} finally {
			Jdbc.close();
		}
	}

	public static void fetchEvents() {
		MarketFilter filter = new MarketFilter();
		Set<String> eventTypeIds = new HashSet<String>();
		eventTypeIds.add("1");
		filter.setEventTypeIds(eventTypeIds);
		try {
			jsonOperations.listEvents(filter, applicationKey, sessionToken);
		} catch (APINGException e) {
			LOGGER.severe(e.getMessage());
			e.printStackTrace();
		}
	}

	/**
	 * 
	 */
	public static void fetchMarkets() {
		long xxx = 0, yyy = 0, zzz = 0;
		long start = System.currentTimeMillis();
		int say = 0;
		try {
			MarketFilter filter = new MarketFilter();
			Set<String> eventTypeIds = new HashSet<String>();
			// Set<String> eventIds = new HashSet<String>();
			// eventIds.add("27170459");
			eventTypeIds.add("1");
			filter.setEventTypeIds(eventTypeIds);
			Set<MarketBettingType> bettingTypes = new HashSet<MarketBettingType>();
			bettingTypes.add(MarketBettingType.ODDS);
			filter.setMarketBettingTypes(bettingTypes);
			// filter.setEventIds(eventIds);

			Set<MarketProjection> marketProjection = new HashSet<MarketProjection>();
			marketProjection.add(MarketProjection.EVENT);

			List<MarketCatalogue> result = jsonOperations.listMarketCatalogue(
					filter, marketProjection, MarketSort.FIRST_TO_START,
					"1000", applicationKey, sessionToken);
			xxx = System.currentTimeMillis();

			Jdbc.start();
			String minsert = MarketCatalogue.startInsert();

			for (MarketCatalogue catalogue : result) {
				minsert += catalogue.getInsert() + ",";
				say++;
				// LOGGER.info(catalogue.getInsert());
				// Jdbc.query(catalogue.getInsert());

				// catalogue.getEvent().getInsert();
			}
			minsert = minsert.substring(0, minsert.length() - 1);
			yyy = System.currentTimeMillis();
			Jdbc.query(minsert);
			zzz = System.currentTimeMillis();
			// System.out.println(minsert);
			// jsonOperations.listEventTypes(filter, applicationKey,
			// sessionToken);
			// jsonOperations.listEvents(filter, applicationKey, sessionToken);
		} catch (APINGException e) {
			System.out.println("error blabla :");
			e.printStackTrace();
		} finally {
			Jdbc.close();
			System.out.println("times:" + start / 1000 + "==X" + xxx / 1000
					+ "=Y" + yyy / 1000 + "==Z" + zzz / 1000 + "say=" + say);
		}
	}

	public static Properties getProp() {
		return prop;
	}

	public static boolean isDebug() {
		return debug;
	}
}
