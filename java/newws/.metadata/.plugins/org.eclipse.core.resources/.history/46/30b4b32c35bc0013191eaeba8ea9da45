import java.awt.Container;
import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import model.Match;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;

import com.betfair.aping.util.DataTable;
import com.betfair.aping.util.Jdbc;
import com.betfair.aping.util.XTable;

public class SwingMain extends JFrame {

	JButton but;
	XTable table, tempoTable;

	public SwingMain(final DataTable matches) {
		super("swing test");

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container contentPane = this.getContentPane();
		contentPane.setLayout(null);

		but = new JButton("blblbla");

		but.setLocation(20, 20);
		but.setSize(100, 20);

		// contentPane.add(but);

		setSize(1000, 600);
		contentPane.setSize(800, 500);
		setVisible(true);

		setLocationRelativeTo(null);
		table = new XTable();
		table.setSize(500, 400);
		table.setData(matches);
		tempoTable = new XTable();
		tempoTable.setSize(500, 400);
		tempoTable.setLocation(550, 20);
		contentPane.add(table);
		contentPane.add(tempoTable);
	}

	/**
	 * @param contentPane
	 */
	public void initComps() {

	}

	public static void main(String[] args) {
		setLookAndFell();

		EventQueue.invokeLater(new Runnable() {

			@SuppressWarnings("unchecked")
			@Override
			public void run() {
				Configuration configuration = new Configuration();
				Configuration cfg = configuration.configure();
				StandardServiceRegistryBuilder builder = new StandardServiceRegistryBuilder()
						.applySettings(cfg.getProperties());
				SessionFactory factory = cfg.buildSessionFactory(builder
						.build());

				Session ss = factory.openSession();
				List<Match> list = null;
				try {

					ss.beginTransaction();

					list = ss.createCriteria(Match.class).list();

					System.out.println("mem size:" + list.size());

					ss.getTransaction().commit();
				} catch (Exception ex) {
					ex.printStackTrace();
					ss.getTransaction().rollback();
					;
				} finally {

				}

				for (final Match m : list) {
					if (m.otherId != 0)
						continue;

					for (final Match ma : list) {
						if (ma.otherId == 0) {
							if (ma.getHomeTeam().equals(m.getHomeTeam())
									|| ma.getAwayTeam().equals(m.getAwayTeam())) {
								m.otherId = ma.getId();
								ma.otherId = m.getId();

								DualMatch dualMatch = new DualMatch() {
									{
										homeTeam = m.getHomeTeam();
										awayTeam = ma.getAwayTeam();
										ht2 = m.getHt();
										ht3 = ma.getHt();
										at2 = m.getAt();
										at3 = ma.getAt();
										draw2 = m.getDraw();
										draw3 = ma.getDraw();

									}
								};

							}
						}

					}

				}

				DataTable dataTable = Jdbc
						.select("select homeTeam,awayTeam,ht,draw,siteId from duplicateAll");
				// TODO Auto-generated method stub
				SwingMain frame = new SwingMain(dataTable);

				// frame.setData(betting.getMatches());
				// frame.initComps();
				// ApiNGDemo.fetchEvents();
				// betting.fetchMarketBook(null);
				// frame.setTempoData(betting.getTempoMatches());
			}
		});

	}

	private static void setLookAndFell() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException e) {

			e.printStackTrace();
		} catch (InstantiationException e) {

			e.printStackTrace();
		} catch (IllegalAccessException e) {

			e.printStackTrace();
		} catch (UnsupportedLookAndFeelException e) {

			e.printStackTrace();
		}
	}

	public void setTempoData(final ArrayList<Hashtable<String, String>> matches) {

		tempoTable.setData(matches);
	}

	private static final long serialVersionUID = 4741507128571219377L;
}
