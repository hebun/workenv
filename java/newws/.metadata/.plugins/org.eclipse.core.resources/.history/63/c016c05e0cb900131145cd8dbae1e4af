import java.awt.Container;
import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.Hashtable;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;

import com.betfair.aping.App;
import com.betfair.aping.Betting;
import com.betfair.aping.util.DataTable;

public class SwingMain extends JFrame {

	JTable table;
	JScrollPane pane;
	JButton but;

	public SwingMain(final DataTable matches) {
		super("swing test");

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container contentPane = this.getContentPane();
		contentPane.setLayout(null);

		but = new JButton("blblbla");

		but.setLocation(20, 20);
		but.setSize(100, 20);

		// contentPane.add(but);

		setSize(1000, 600);
		contentPane.setSize(800, 500);
		setVisible(true);

		TableModel tableModel = new AbstractTableModel() {

			private static final long serialVersionUID = 1L;

			@Override
			public Object getValueAt(int rowIndex, int columnIndex) {

				Object object = matches.get(rowIndex).values().toArray()[columnIndex];
				// System.out.println("valu" + object);
				return object;
			}

			@Override
			public int getRowCount() {

				return matches.size();
			}

			@Override
			public int getColumnCount() {

				return matches.get(0).size();
			}

			@Override
			public String getColumnName() {
				return "xxx";

			}
		};

		table = new JTable(tableModel);
		initComps();

	}

	/**
	 * @param contentPane
	 */
	public void initComps() {
		System.out.println("here");
		Container contentPane = this.getContentPane();
		setLocationRelativeTo(null);

		pane = new JScrollPane(table);

		pane.setLocation(20, 20);
		pane.setSize(600, 400);
		table.setFillsViewportHeight(true);

		contentPane.add(pane);
		table.repaint();
	}

	public static void main(String[] args) {
		setLookAndFell();

		final Betting betting = new Betting();
		betting.setApp(new App());
		EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				SwingMain frame = new SwingMain(betting.getMatches());

				// frame.setData(betting.getMatches());
				// frame.initComps();
				// betting.fetchMarketBook(null);
			}
		});

	}

	private static void setLookAndFell() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException e) {

			e.printStackTrace();
		} catch (InstantiationException e) {

			e.printStackTrace();
		} catch (IllegalAccessException e) {

			e.printStackTrace();
		} catch (UnsupportedLookAndFeelException e) {

			e.printStackTrace();
		}
	}

	private void setData(final ArrayList<Hashtable<String, String>> matches) {
		System.out.println("sdfsdf");

		// table.repaint();
	}

	private static final long serialVersionUID = 4741507128571219377L;
}
